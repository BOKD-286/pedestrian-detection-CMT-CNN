
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_caffe_2eproto();
void protobuf_AssignDesc_caffe_2eproto();
void protobuf_ShutdownFile_caffe_2eproto();

class BlobShape;
class BlobProto;
class BlobProtoVector;
class Datum;
class FillerParameter;
class NetParameter;
class SolverParameter;
class SolverState;
class NetState;
class NetStateRule;
class ParamSpec;
class LayerParameter;
class TransformationParameter;
class LossParameter;
class AccuracyParameter;
class ArgMaxParameter;
class ConcatParameter;
class ContrastiveLossParameter;
class ConvolutionParameter;
class DataParameter;
class DropoutParameter;
class DummyDataParameter;
class EltwiseParameter;
class ExpParameter;
class FlattenParameter;
class HDF5DataParameter;
class HDF5OutputParameter;
class HingeLossParameter;
class ImageDataParameter;
class InfogainLossParameter;
class InnerProductParameter;
class LogParameter;
class LRNParameter;
class MemoryDataParameter;
class MVNParameter;
class PoolingParameter;
class PowerParameter;
class PythonParameter;
class ReductionParameter;
class ReLUParameter;
class ReshapeParameter;
class ROIPoolingParameter;
class SigmoidParameter;
class SliceParameter;
class SoftmaxParameter;
class TanHParameter;
class ThresholdParameter;
class WindowDataParameter;
class SPPParameter;
class V1LayerParameter;
class V0LayerParameter;
class PReLUParameter;

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAGRAD;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_RESHAPE = 40,
  V1LayerParameter_LayerType_ROIPOOLING = 41,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SMOOTH_L1_LOSS = 42,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_SMOOTH_L1_LOSS;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 7;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 7;
  inline const ::caffe::BlobShape& shape() const;
  inline ::caffe::BlobShape* mutable_shape();
  inline ::caffe::BlobShape* release_shape();
  inline void set_allocated_shape(::caffe::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  void Swap(BlobProtoVector* other);

  // implements Message ----------------------------------------------

  BlobProtoVector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProtoVector* default_instance_;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::RepeatedField< float > float_data_;
  bool encoded_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  FillerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE = FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // optional float min = 3 [default = 0];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline float min() const;
  inline void set_min(float value);

  // optional float max = 4 [default = 1];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline float max() const;
  inline void set_max(float value);

  // optional float mean = 5 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 6 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 6;
  inline float std() const;
  inline void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 7;
  inline ::google::protobuf::int32 sparse() const;
  inline void set_sparse(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  inline bool has_variance_norm() const;
  inline void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  inline ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  inline void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string input = 3;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated .caffe.BlobShape input_shape = 8;
  inline int input_shape_size() const;
  inline void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  inline const ::caffe::BlobShape& input_shape(int index) const;
  inline ::caffe::BlobShape* mutable_input_shape(int index);
  inline ::caffe::BlobShape* add_input_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();

  // repeated int32 input_dim = 4;
  inline int input_dim_size() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  inline ::google::protobuf::int32 input_dim(int index) const;
  inline void set_input_dim(int index, ::google::protobuf::int32 value);
  inline void add_input_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional bool force_backward = 5 [default = false];
  inline bool has_force_backward() const;
  inline void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  inline bool force_backward() const;
  inline void set_force_backward(bool value);

  // optional .caffe.NetState state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline const ::caffe::NetState& state() const;
  inline ::caffe::NetState* mutable_state();
  inline ::caffe::NetState* release_state();
  inline void set_allocated_state(::caffe::NetState* state);

  // optional bool debug_info = 7 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // repeated .caffe.LayerParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::caffe::LayerParameter& layer(int index) const;
  inline ::caffe::LayerParameter* mutable_layer(int index);
  inline ::caffe::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layer();

  // repeated .caffe.V1LayerParameter layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::caffe::V1LayerParameter& layers(int index) const;
  inline ::caffe::V1LayerParameter* mutable_layers(int index);
  inline ::caffe::V1LayerParameter* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_force_backward();
  inline void clear_has_force_backward();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::caffe::NetState* state_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layer_;
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter > layers_;
  bool force_backward_;
  bool debug_info_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  SolverParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU = SolverParameter_SolverMode_CPU;
  static const SolverMode GPU = SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD = SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV = SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD = SolverParameter_SolverType_ADAGRAD;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string net = 24;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 24;
  inline const ::std::string& net() const;
  inline void set_net(const ::std::string& value);
  inline void set_net(const char* value);
  inline void set_net(const char* value, size_t size);
  inline ::std::string* mutable_net();
  inline ::std::string* release_net();
  inline void set_allocated_net(::std::string* net);

  // optional .caffe.NetParameter net_param = 25;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  inline const ::caffe::NetParameter& net_param() const;
  inline ::caffe::NetParameter* mutable_net_param();
  inline ::caffe::NetParameter* release_net_param();
  inline void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional string train_net = 1;
  inline bool has_train_net() const;
  inline void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  inline const ::std::string& train_net() const;
  inline void set_train_net(const ::std::string& value);
  inline void set_train_net(const char* value);
  inline void set_train_net(const char* value, size_t size);
  inline ::std::string* mutable_train_net();
  inline ::std::string* release_train_net();
  inline void set_allocated_train_net(::std::string* train_net);

  // repeated string test_net = 2;
  inline int test_net_size() const;
  inline void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  inline const ::std::string& test_net(int index) const;
  inline ::std::string* mutable_test_net(int index);
  inline void set_test_net(int index, const ::std::string& value);
  inline void set_test_net(int index, const char* value);
  inline void set_test_net(int index, const char* value, size_t size);
  inline ::std::string* add_test_net();
  inline void add_test_net(const ::std::string& value);
  inline void add_test_net(const char* value);
  inline void add_test_net(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // optional .caffe.NetParameter train_net_param = 21;
  inline bool has_train_net_param() const;
  inline void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  inline const ::caffe::NetParameter& train_net_param() const;
  inline ::caffe::NetParameter* mutable_train_net_param();
  inline ::caffe::NetParameter* release_train_net_param();
  inline void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // repeated .caffe.NetParameter test_net_param = 22;
  inline int test_net_param_size() const;
  inline void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  inline const ::caffe::NetParameter& test_net_param(int index) const;
  inline ::caffe::NetParameter* mutable_test_net_param(int index);
  inline ::caffe::NetParameter* add_test_net_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();

  // optional .caffe.NetState train_state = 26;
  inline bool has_train_state() const;
  inline void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  inline const ::caffe::NetState& train_state() const;
  inline ::caffe::NetState* mutable_train_state();
  inline ::caffe::NetState* release_train_state();
  inline void set_allocated_train_state(::caffe::NetState* train_state);

  // repeated .caffe.NetState test_state = 27;
  inline int test_state_size() const;
  inline void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  inline const ::caffe::NetState& test_state(int index) const;
  inline ::caffe::NetState* mutable_test_state(int index);
  inline ::caffe::NetState* add_test_state();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();

  // repeated int32 test_iter = 3;
  inline int test_iter_size() const;
  inline void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  inline ::google::protobuf::int32 test_iter(int index) const;
  inline void set_test_iter(int index, ::google::protobuf::int32 value);
  inline void add_test_iter(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // optional int32 test_interval = 4 [default = 0];
  inline bool has_test_interval() const;
  inline void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  inline ::google::protobuf::int32 test_interval() const;
  inline void set_test_interval(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  inline bool has_test_compute_loss() const;
  inline void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  inline bool test_compute_loss() const;
  inline void set_test_compute_loss(bool value);

  // optional bool test_initialization = 32 [default = true];
  inline bool has_test_initialization() const;
  inline void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  inline bool test_initialization() const;
  inline void set_test_initialization(bool value);

  // optional float base_lr = 5;
  inline bool has_base_lr() const;
  inline void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  inline float base_lr() const;
  inline void set_base_lr(float value);

  // optional int32 display = 6;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 6;
  inline ::google::protobuf::int32 display() const;
  inline void set_display(::google::protobuf::int32 value);

  // optional int32 average_loss = 33 [default = 1];
  inline bool has_average_loss() const;
  inline void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  inline ::google::protobuf::int32 average_loss() const;
  inline void set_average_loss(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional int32 iter_size = 36 [default = 1];
  inline bool has_iter_size() const;
  inline void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  inline ::google::protobuf::int32 iter_size() const;
  inline void set_iter_size(::google::protobuf::int32 value);

  // optional string lr_policy = 8;
  inline bool has_lr_policy() const;
  inline void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  inline const ::std::string& lr_policy() const;
  inline void set_lr_policy(const ::std::string& value);
  inline void set_lr_policy(const char* value);
  inline void set_lr_policy(const char* value, size_t size);
  inline ::std::string* mutable_lr_policy();
  inline ::std::string* release_lr_policy();
  inline void set_allocated_lr_policy(::std::string* lr_policy);

  // optional float gamma = 9;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 9;
  inline float gamma() const;
  inline void set_gamma(float value);

  // optional float power = 10;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 10;
  inline float power() const;
  inline void set_power(float value);

  // optional float momentum = 11;
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional float weight_decay = 12;
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional string regularization_type = 29 [default = "L2"];
  inline bool has_regularization_type() const;
  inline void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  inline const ::std::string& regularization_type() const;
  inline void set_regularization_type(const ::std::string& value);
  inline void set_regularization_type(const char* value);
  inline void set_regularization_type(const char* value, size_t size);
  inline ::std::string* mutable_regularization_type();
  inline ::std::string* release_regularization_type();
  inline void set_allocated_regularization_type(::std::string* regularization_type);

  // optional int32 stepsize = 13;
  inline bool has_stepsize() const;
  inline void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  inline ::google::protobuf::int32 stepsize() const;
  inline void set_stepsize(::google::protobuf::int32 value);

  // repeated int32 stepvalue = 34;
  inline int stepvalue_size() const;
  inline void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  inline ::google::protobuf::int32 stepvalue(int index) const;
  inline void set_stepvalue(int index, ::google::protobuf::int32 value);
  inline void add_stepvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional float clip_gradients = 35 [default = -1];
  inline bool has_clip_gradients() const;
  inline void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  inline float clip_gradients() const;
  inline void set_clip_gradients(float value);

  // optional int32 snapshot = 14 [default = 0];
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  inline ::google::protobuf::int32 snapshot() const;
  inline void set_snapshot(::google::protobuf::int32 value);

  // optional string snapshot_prefix = 15;
  inline bool has_snapshot_prefix() const;
  inline void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  inline const ::std::string& snapshot_prefix() const;
  inline void set_snapshot_prefix(const ::std::string& value);
  inline void set_snapshot_prefix(const char* value);
  inline void set_snapshot_prefix(const char* value, size_t size);
  inline ::std::string* mutable_snapshot_prefix();
  inline ::std::string* release_snapshot_prefix();
  inline void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional bool snapshot_diff = 16 [default = false];
  inline bool has_snapshot_diff() const;
  inline void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  inline bool snapshot_diff() const;
  inline void set_snapshot_diff(bool value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  inline bool has_solver_mode() const;
  inline void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  inline ::caffe::SolverParameter_SolverMode solver_mode() const;
  inline void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional int32 device_id = 18 [default = 0];
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  inline ::google::protobuf::int32 device_id() const;
  inline void set_device_id(::google::protobuf::int32 value);

  // optional int64 random_seed = 20 [default = -1];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  inline ::google::protobuf::int64 random_seed() const;
  inline void set_random_seed(::google::protobuf::int64 value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  inline bool has_solver_type() const;
  inline void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  inline ::caffe::SolverParameter_SolverType solver_type() const;
  inline void set_solver_type(::caffe::SolverParameter_SolverType value);

  // optional float delta = 31 [default = 1e-008];
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 31;
  inline float delta() const;
  inline void set_delta(float value);

  // optional bool debug_info = 23 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  inline bool has_snapshot_after_train() const;
  inline void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  inline bool snapshot_after_train() const;
  inline void set_snapshot_after_train(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_train_net();
  inline void clear_has_train_net();
  inline void set_has_train_net_param();
  inline void clear_has_train_net_param();
  inline void set_has_train_state();
  inline void clear_has_train_state();
  inline void set_has_test_interval();
  inline void clear_has_test_interval();
  inline void set_has_test_compute_loss();
  inline void clear_has_test_compute_loss();
  inline void set_has_test_initialization();
  inline void clear_has_test_initialization();
  inline void set_has_base_lr();
  inline void clear_has_base_lr();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_average_loss();
  inline void clear_has_average_loss();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_iter_size();
  inline void clear_has_iter_size();
  inline void set_has_lr_policy();
  inline void clear_has_lr_policy();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_regularization_type();
  inline void clear_has_regularization_type();
  inline void set_has_stepsize();
  inline void clear_has_stepsize();
  inline void set_has_clip_gradients();
  inline void clear_has_clip_gradients();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_snapshot_prefix();
  inline void clear_has_snapshot_prefix();
  inline void set_has_snapshot_diff();
  inline void clear_has_snapshot_diff();
  inline void set_has_solver_mode();
  inline void clear_has_solver_mode();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_solver_type();
  inline void clear_has_solver_type();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_snapshot_after_train();
  inline void clear_has_snapshot_after_train();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* net_;
  ::caffe::NetParameter* net_param_;
  ::std::string* train_net_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::caffe::NetParameter* train_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 average_loss_;
  ::google::protobuf::int32 max_iter_;
  ::google::protobuf::int32 iter_size_;
  ::std::string* lr_policy_;
  float gamma_;
  float power_;
  float momentum_;
  bool test_compute_loss_;
  bool test_initialization_;
  bool snapshot_diff_;
  bool debug_info_;
  static ::std::string* _default_regularization_type_;
  ::std::string* regularization_type_;
  float weight_decay_;
  ::google::protobuf::int32 stepsize_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  float clip_gradients_;
  ::google::protobuf::int32 snapshot_;
  ::std::string* snapshot_prefix_;
  int solver_mode_;
  ::google::protobuf::int32 device_id_;
  ::google::protobuf::int64 random_seed_;
  int solver_type_;
  float delta_;
  bool snapshot_after_train_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SolverParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  SolverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iter = 1;
  inline bool has_iter() const;
  inline void clear_iter();
  static const int kIterFieldNumber = 1;
  inline ::google::protobuf::int32 iter() const;
  inline void set_iter(::google::protobuf::int32 value);

  // optional string learned_net = 2;
  inline bool has_learned_net() const;
  inline void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  inline const ::std::string& learned_net() const;
  inline void set_learned_net(const ::std::string& value);
  inline void set_learned_net(const char* value);
  inline void set_learned_net(const char* value, size_t size);
  inline ::std::string* mutable_learned_net();
  inline ::std::string* release_learned_net();
  inline void set_allocated_learned_net(::std::string* learned_net);

  // repeated .caffe.BlobProto history = 3;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 3;
  inline const ::caffe::BlobProto& history(int index) const;
  inline ::caffe::BlobProto* mutable_history(int index);
  inline ::caffe::BlobProto* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();

  // optional int32 current_step = 4 [default = 0];
  inline bool has_current_step() const;
  inline void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  inline ::google::protobuf::int32 current_step() const;
  inline void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  inline void set_has_iter();
  inline void clear_has_iter();
  inline void set_has_learned_net();
  inline void clear_has_learned_net();
  inline void set_has_current_step();
  inline void clear_has_current_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SolverState* default_instance_;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  NetState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1 [default = TEST];
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // optional int32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 3;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetState* default_instance_;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  NetStateRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // repeated string stage = 4;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  inline int not_stage_size() const;
  inline void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  inline const ::std::string& not_stage(int index) const;
  inline ::std::string* mutable_not_stage(int index);
  inline void set_not_stage(int index, const ::std::string& value);
  inline void set_not_stage(int index, const char* value);
  inline void set_not_stage(int index, const char* value, size_t size);
  inline ::std::string* add_not_stage();
  inline void add_not_stage(const ::std::string& value);
  inline void add_not_stage(const char* value);
  inline void add_not_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  ::google::protobuf::int32 max_level_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetStateRule* default_instance_;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  ParamSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT = ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE = ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  inline bool has_share_mode() const;
  inline void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  inline ::caffe::ParamSpec_DimCheckMode share_mode() const;
  inline void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  inline bool has_lr_mult() const;
  inline void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  inline float lr_mult() const;
  inline void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  inline bool has_decay_mult() const;
  inline void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  inline float decay_mult() const;
  inline void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_share_mode();
  inline void clear_has_share_mode();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ParamSpec* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .caffe.Phase phase = 10;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 10;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // repeated float loss_weight = 5;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.ParamSpec param = 6;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline const ::caffe::ParamSpec& param(int index) const;
  inline ::caffe::ParamSpec* mutable_param(int index);
  inline ::caffe::ParamSpec* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();

  // repeated .caffe.BlobProto blobs = 7;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // repeated bool propagate_down = 11;
  inline int propagate_down_size() const;
  inline void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  inline bool propagate_down(int index) const;
  inline void set_propagate_down(int index, bool value);
  inline void add_propagate_down(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // repeated .caffe.NetStateRule include = 8;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 8;
  inline const ::caffe::NetStateRule& include(int index) const;
  inline ::caffe::NetStateRule* mutable_include(int index);
  inline ::caffe::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();

  // repeated .caffe.NetStateRule exclude = 9;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  inline const ::caffe::NetStateRule& exclude(int index) const;
  inline ::caffe::NetStateRule* mutable_exclude(int index);
  inline ::caffe::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();

  // optional .caffe.TransformationParameter transform_param = 100;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  inline const ::caffe::TransformationParameter& transform_param() const;
  inline ::caffe::TransformationParameter* mutable_transform_param();
  inline ::caffe::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  inline const ::caffe::LossParameter& loss_param() const;
  inline ::caffe::LossParameter* mutable_loss_param();
  inline ::caffe::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  inline const ::caffe::AccuracyParameter& accuracy_param() const;
  inline ::caffe::AccuracyParameter* mutable_accuracy_param();
  inline ::caffe::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  inline bool has_argmax_param() const;
  inline void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  inline const ::caffe::ArgMaxParameter& argmax_param() const;
  inline ::caffe::ArgMaxParameter* mutable_argmax_param();
  inline ::caffe::ArgMaxParameter* release_argmax_param();
  inline void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  inline const ::caffe::ConcatParameter& concat_param() const;
  inline ::caffe::ConcatParameter* mutable_concat_param();
  inline ::caffe::ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  inline bool has_contrastive_loss_param() const;
  inline void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  inline const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  inline ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  inline ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  inline void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  inline const ::caffe::ConvolutionParameter& convolution_param() const;
  inline ::caffe::ConvolutionParameter* mutable_convolution_param();
  inline ::caffe::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 107;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  inline const ::caffe::DataParameter& data_param() const;
  inline ::caffe::DataParameter* mutable_data_param();
  inline ::caffe::DataParameter* release_data_param();
  inline void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  inline const ::caffe::DropoutParameter& dropout_param() const;
  inline ::caffe::DropoutParameter* mutable_dropout_param();
  inline ::caffe::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  inline bool has_dummy_data_param() const;
  inline void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  inline const ::caffe::DummyDataParameter& dummy_data_param() const;
  inline ::caffe::DummyDataParameter* mutable_dummy_data_param();
  inline ::caffe::DummyDataParameter* release_dummy_data_param();
  inline void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  inline const ::caffe::EltwiseParameter& eltwise_param() const;
  inline ::caffe::EltwiseParameter* mutable_eltwise_param();
  inline ::caffe::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ExpParameter exp_param = 111;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  inline const ::caffe::ExpParameter& exp_param() const;
  inline ::caffe::ExpParameter* mutable_exp_param();
  inline ::caffe::ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  inline bool has_flatten_param() const;
  inline void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  inline const ::caffe::FlattenParameter& flatten_param() const;
  inline ::caffe::FlattenParameter* mutable_flatten_param();
  inline ::caffe::FlattenParameter* release_flatten_param();
  inline void set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  inline bool has_hdf5_data_param() const;
  inline void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  inline const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  inline ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  inline ::caffe::HDF5DataParameter* release_hdf5_data_param();
  inline void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  inline const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  inline ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  inline bool has_hinge_loss_param() const;
  inline void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  inline const ::caffe::HingeLossParameter& hinge_loss_param() const;
  inline ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  inline ::caffe::HingeLossParameter* release_hinge_loss_param();
  inline void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  inline bool has_image_data_param() const;
  inline void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  inline const ::caffe::ImageDataParameter& image_data_param() const;
  inline ::caffe::ImageDataParameter* mutable_image_data_param();
  inline ::caffe::ImageDataParameter* release_image_data_param();
  inline void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  inline bool has_infogain_loss_param() const;
  inline void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  inline const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  inline ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  inline ::caffe::InfogainLossParameter* release_infogain_loss_param();
  inline void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  inline const ::caffe::InnerProductParameter& inner_product_param() const;
  inline ::caffe::InnerProductParameter* mutable_inner_product_param();
  inline ::caffe::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LogParameter log_param = 134;
  inline bool has_log_param() const;
  inline void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  inline const ::caffe::LogParameter& log_param() const;
  inline ::caffe::LogParameter* mutable_log_param();
  inline ::caffe::LogParameter* release_log_param();
  inline void set_allocated_log_param(::caffe::LogParameter* log_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  inline const ::caffe::LRNParameter& lrn_param() const;
  inline ::caffe::LRNParameter* mutable_lrn_param();
  inline ::caffe::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  inline const ::caffe::MemoryDataParameter& memory_data_param() const;
  inline ::caffe::MemoryDataParameter* mutable_memory_data_param();
  inline ::caffe::MemoryDataParameter* release_memory_data_param();
  inline void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  inline bool has_mvn_param() const;
  inline void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  inline const ::caffe::MVNParameter& mvn_param() const;
  inline ::caffe::MVNParameter* mutable_mvn_param();
  inline ::caffe::MVNParameter* release_mvn_param();
  inline void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  inline const ::caffe::PoolingParameter& pooling_param() const;
  inline ::caffe::PoolingParameter* mutable_pooling_param();
  inline ::caffe::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  inline const ::caffe::PowerParameter& power_param() const;
  inline ::caffe::PowerParameter* mutable_power_param();
  inline ::caffe::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  inline const ::caffe::PReLUParameter& prelu_param() const;
  inline ::caffe::PReLUParameter* mutable_prelu_param();
  inline ::caffe::PReLUParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.PythonParameter python_param = 130;
  inline bool has_python_param() const;
  inline void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  inline const ::caffe::PythonParameter& python_param() const;
  inline ::caffe::PythonParameter* mutable_python_param();
  inline ::caffe::PythonParameter* release_python_param();
  inline void set_allocated_python_param(::caffe::PythonParameter* python_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  inline bool has_reduction_param() const;
  inline void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  inline const ::caffe::ReductionParameter& reduction_param() const;
  inline ::caffe::ReductionParameter* mutable_reduction_param();
  inline ::caffe::ReductionParameter* release_reduction_param();
  inline void set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  inline const ::caffe::ReLUParameter& relu_param() const;
  inline ::caffe::ReLUParameter* mutable_relu_param();
  inline ::caffe::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  inline bool has_reshape_param() const;
  inline void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  inline const ::caffe::ReshapeParameter& reshape_param() const;
  inline ::caffe::ReshapeParameter* mutable_reshape_param();
  inline ::caffe::ReshapeParameter* release_reshape_param();
  inline void set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param);

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 137;
  inline bool has_roi_pooling_param() const;
  inline void clear_roi_pooling_param();
  static const int kRoiPoolingParamFieldNumber = 137;
  inline const ::caffe::ROIPoolingParameter& roi_pooling_param() const;
  inline ::caffe::ROIPoolingParameter* mutable_roi_pooling_param();
  inline ::caffe::ROIPoolingParameter* release_roi_pooling_param();
  inline void set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  inline const ::caffe::SigmoidParameter& sigmoid_param() const;
  inline ::caffe::SigmoidParameter* mutable_sigmoid_param();
  inline ::caffe::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  inline const ::caffe::SoftmaxParameter& softmax_param() const;
  inline ::caffe::SoftmaxParameter* mutable_softmax_param();
  inline ::caffe::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SPPParameter spp_param = 132;
  inline bool has_spp_param() const;
  inline void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  inline const ::caffe::SPPParameter& spp_param() const;
  inline ::caffe::SPPParameter* mutable_spp_param();
  inline ::caffe::SPPParameter* release_spp_param();
  inline void set_allocated_spp_param(::caffe::SPPParameter* spp_param);

  // optional .caffe.SliceParameter slice_param = 126;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  inline const ::caffe::SliceParameter& slice_param() const;
  inline ::caffe::SliceParameter* mutable_slice_param();
  inline ::caffe::SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  inline const ::caffe::TanHParameter& tanh_param() const;
  inline ::caffe::TanHParameter* mutable_tanh_param();
  inline ::caffe::TanHParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  inline bool has_threshold_param() const;
  inline void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  inline const ::caffe::ThresholdParameter& threshold_param() const;
  inline ::caffe::ThresholdParameter* mutable_threshold_param();
  inline ::caffe::ThresholdParameter* release_threshold_param();
  inline void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  inline bool has_window_data_param() const;
  inline void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  inline const ::caffe::WindowDataParameter& window_data_param() const;
  inline ::caffe::WindowDataParameter* mutable_window_data_param();
  inline ::caffe::WindowDataParameter* release_window_data_param();
  inline void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_flatten_param();
  inline void clear_has_flatten_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_log_param();
  inline void clear_has_log_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_python_param();
  inline void clear_has_python_param();
  inline void set_has_reduction_param();
  inline void clear_has_reduction_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_roi_pooling_param();
  inline void clear_has_roi_pooling_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_spp_param();
  inline void clear_has_spp_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::FlattenParameter* flatten_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LogParameter* log_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::PythonParameter* python_param_;
  ::caffe::ReductionParameter* reduction_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::ReshapeParameter* reshape_param_;
  ::caffe::ROIPoolingParameter* roi_pooling_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SPPParameter* spp_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  int phase_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  TransformationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline float scale() const;
  inline void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 6 [default = false];
  inline bool has_force_color() const;
  inline void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  inline bool force_color() const;
  inline void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  inline bool has_force_gray() const;
  inline void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  inline bool force_gray() const;
  inline void set_force_gray(bool value);

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  ::google::protobuf::uint32 crop_size_;
  ::std::string* mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  LossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // optional bool normalize = 2 [default = true];
  inline bool has_normalize() const;
  inline void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  inline bool normalize() const;
  inline void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LossParameter)
 private:
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  bool normalize_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  AccuracyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 1;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 ignore_label = 3;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 ignore_label_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AccuracyParameter* default_instance_;
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  void Swap(ArgMaxParameter* other);

  // implements Message ----------------------------------------------

  ArgMaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  inline bool has_out_max_val() const;
  inline void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  inline bool out_max_val() const;
  inline void set_out_max_val(bool value);

  // optional uint32 top_k = 2 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 2;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  inline void set_has_out_max_val();
  inline void clear_has_out_max_val();
  inline void set_has_top_k();
  inline void clear_has_top_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool out_max_val_;
  ::google::protobuf::uint32 top_k_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ArgMaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  void Swap(ConcatParameter* other);

  // implements Message ----------------------------------------------

  ConcatParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 1 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 concat_dim_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ConcatParameter* default_instance_;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  void Swap(ContrastiveLossParameter* other);

  // implements Message ----------------------------------------------

  ContrastiveLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 1;
  inline float margin() const;
  inline void set_margin(float value);

  // optional bool legacy_version = 2 [default = false];
  inline bool has_legacy_version() const;
  inline void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  inline bool legacy_version() const;
  inline void set_legacy_version(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_legacy_version();
  inline void clear_has_legacy_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float margin_;
  bool legacy_version_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ContrastiveLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT = ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE = ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN = ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional uint32 pad = 3 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 3;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 4;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 6 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 6;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 15;
  inline ::caffe::ConvolutionParameter_Engine engine() const;
  inline void set_engine(::caffe::ConvolutionParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  int engine_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB = DataParameter_DB_LEVELDB;
  static const DB LMDB = DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  inline bool has_backend() const;
  inline void clear_backend();
  static const int kBackendFieldNumber = 8;
  inline ::caffe::DataParameter_DB backend() const;
  inline void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  inline bool has_force_encoded_color() const;
  inline void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  inline bool force_encoded_color() const;
  inline void set_force_encoded_color(bool value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_force_encoded_color();
  inline void clear_has_force_encoded_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  int backend_;
  float scale_;
  ::std::string* mean_file_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_encoded_color_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  DropoutParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // optional bool scale_train = 2 [default = true];
  inline bool has_scale_train() const;
  inline void clear_scale_train();
  static const int kScaleTrainFieldNumber = 2;
  inline bool scale_train() const;
  inline void set_scale_train(bool value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_scale_train();
  inline void clear_has_scale_train();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dropout_ratio_;
  bool scale_train_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  void Swap(DummyDataParameter* other);

  // implements Message ----------------------------------------------

  DummyDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  inline int data_filler_size() const;
  inline void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  inline const ::caffe::FillerParameter& data_filler(int index) const;
  inline ::caffe::FillerParameter* mutable_data_filler(int index);
  inline ::caffe::FillerParameter* add_data_filler();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();

  // repeated .caffe.BlobShape shape = 6;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 6;
  inline const ::caffe::BlobShape& shape(int index) const;
  inline ::caffe::BlobShape* mutable_shape(int index);
  inline ::caffe::BlobShape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();

  // repeated uint32 num = 2;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::uint32 value);
  inline void add_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline ::google::protobuf::uint32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::uint32 value);
  inline void add_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height(int index) const;
  inline void set_height(int index, ::google::protobuf::uint32 value);
  inline void add_height(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  inline int width_size() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 width(int index) const;
  inline void set_width(int index, ::google::protobuf::uint32 value);
  inline void add_width(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DummyDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  EltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD = EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM = EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX = EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::caffe::EltwiseParameter_EltwiseOp operation() const;
  inline void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  inline bool has_stable_prod_grad() const;
  inline void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  inline bool stable_prod_grad() const;
  inline void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  void Swap(ExpParameter* other);

  // implements Message ----------------------------------------------

  ExpParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ExpParameter* default_instance_;
};
// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  void Swap(FlattenParameter* other);

  // implements Message ----------------------------------------------

  FlattenParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  inline bool has_end_axis() const;
  inline void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  inline ::google::protobuf::int32 end_axis() const;
  inline void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_end_axis();
  inline void clear_has_end_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FlattenParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  void Swap(HDF5DataParameter* other);

  // implements Message ----------------------------------------------

  HDF5DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  void Swap(HDF5OutputParameter* other);

  // implements Message ----------------------------------------------

  HDF5OutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_name_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5OutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  void Swap(HingeLossParameter* other);

  // implements Message ----------------------------------------------

  HingeLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 = HingeLossParameter_Norm_L1;
  static const Norm L2 = HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  inline bool has_norm() const;
  inline void clear_norm();
  static const int kNormFieldNumber = 1;
  inline ::caffe::HingeLossParameter_Norm norm() const;
  inline void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  inline void set_has_norm();
  inline void clear_has_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int norm_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HingeLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  ImageDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional uint32 new_height = 9 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 new_height() const;
  inline void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 new_width() const;
  inline void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  inline bool has_is_color() const;
  inline void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  inline bool is_color() const;
  inline void set_is_color(bool value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional string root_folder = 12 [default = ""];
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool shuffle_;
  bool is_color_;
  bool mirror_;
  float scale_;
  ::std::string* mean_file_;
  ::std::string* root_folder_;
  ::google::protobuf::uint32 crop_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  void Swap(InfogainLossParameter* other);

  // implements Message ----------------------------------------------

  InfogainLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InfogainLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  void Swap(InnerProductParameter* other);
